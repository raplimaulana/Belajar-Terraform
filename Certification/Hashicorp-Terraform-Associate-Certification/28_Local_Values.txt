### LOCAL VALUES ###
A local value (locals) assign a name to an expression, so you can use it multiple times within a module without repeating it.
Once a local value is declared, you can reference it in expressions as local.<NAME>.

Locals can help dry up your code.
It is best practice to use locals sparingly since it Terraform is intended to be declarative and overuse of locals can make it difficult to determine what code is doing.

##Declare locals
#Locals block
locals {
  service_name = "forum"
  owner        = "Commuity Team"
}

#Multiple locals block
locals {
  instance_id = concat(aws_instance.blue.*.id, aws_instance.green.*.id)         #id's for multiple sets of EC2 instance, merge together
}

#reference locals within locals
locals {
  common_tags = {                                                               #common tags to be assigned to all resources
    Service = local.service_name
    Owner   = local.owner
  }
}

##Reference local on resource
resource "aws_instance" "example" {
  ...
  tags = local.service_name
}


##Example 2
nano main.tf 

terraform {
  backend "remote" {
    hostname     = "app.terraform.io"
    organization = "rapli"

    workspace {
      name = "getting-started"
    }
  }
}

required_providers {
  aws = {
  source  = "hashicorp/aws"
  region  = "3.58.0"
  }
}

provider "aws" {
  profile = "default"
  region  = "us-east-1"
}

variable "instance_type" {
  type        = string
  description = "The size of instance"
  #sensitive  = true
  validation {
    condition     = can(regex("^t2.", var.instance_type))
    error_message = "Instance must be e t2 type EC2 instance."
  }
}

locals {
  ami = "ami-087c17d1fe0178315"
  instance_type = var.instance_type
}

resource "aws_instance" "my_server" {
  ami           = local.ami
  instance_type = local.instance_type
}

output "public_ip" {
  value = aws_instance.my_server.public_ip
}