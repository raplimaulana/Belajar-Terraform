### INPUT VARIABLES ###
Input variables or terraform variables are parameters for terraform modules.
You can declare variables in either: 
• Root module 
• Child module 

##Value variable 
• default 
  A default value which then makes the variable optional.

• type
  This argument specifies what value types are accepted for the variable.

• description
  This specifies input variable's documentation.

• validation
  A block to define rules, usually in addiction to type constraints.

• sensitive 
  Limits terraform UI output when variable is used in configuration.

##Example input variable 
variable "image_id" {
  type = string
}

variable "availibility_zone_names" {
  type = list(string)
  default = ["us-west-1a"]
}

variable "availibility_zone_names" {
  type = list(object({
    internal = number
    external = number
    protocol = string
  }))
  default = [{
    internal = 8300
    external = 8300
    protocol = "tcp"
  }]
}


##Example 2
nano terraform.tfvars
instance_type="t2.micro"


nano main.tf 

terraform {
  backend "remote" {
    hostname     = "app.terraform.io"
    organization = "rapli"

    workspace {
      name = "getting-started"
    }
  }
}

required_providers {
  aws = {
  source = "hashicorp/aws"
  region  = "3.58.0"
  }
}

provider "aws" {
  profile = "default"
  region = "us-east-1"
}

variable "instance_type" {
  type = string
}

resource "aws_instance" "my_server" {
  ami           = "ami-087c17d1fe0178315"
  instance_type = var.instance_type

  tags = {
    Name = "MyServer-{local.project_name}"
  }
}

output "public_ip" {
  value = aws_instance.my_server.public_ip
}


##Example 3
nano main.tf 

terraform {
  backend "remote" {
    hostname     = "app.terraform.io"
    organization = "rapli"

    workspace {
      name = "getting-started"
    }
  }
}

required_providers {
  aws = {
  source  = "hashicorp/aws"
  region  = "3.58.0"
  }
}

provider "aws" {
  profile = "default"
  region  = "us-east-1"
}

variable "instance_type" {
  type        = string
  description = "The size of instance"
  #sensitive  = true
  validation {
    condition     = can(regex("^t2.", var.instance_type))
    error_message = "Instance must be e t2 type EC2 instance."
  }
}

resource "aws_instance" "my_server" {
  ami           = "ami-087c17d1fe0178315"
  instance_type = var.instance_type

  tags = {
    Name = "MyServer-{local.project_name}"
  }
}

output "public_ip" {
  value = aws_instance.my_server.public_ip
}