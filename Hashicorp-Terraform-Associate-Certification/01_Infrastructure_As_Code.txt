### INFRASTRUCTURE AS CODE ###
##The problem with manual configuration
Manually configuring your cloud infrastructure allows you easily start using new service offerings to quickly prototype architectures however it comes with many downsides:
•  Its easy to miss-configured as service though human error.
•  Its hard to manage the expected state of configuration for compliance.
•  Its hard to transfer configuration knowledge to other team members.

##Infrastructure as Code (IaC)
You write a configuration script to automate creating, updating or deploying cloud infrastructure.
IaC is a blueprint of your infrastucture.

##Popular IaC tools
• Declarative
  - What you see is what you get (explicit).
  - More verbose, but zero chance of miss configuration.
  - Uses scripting language eg. JSON, YAML and XML.
  - Limited or no support for imperative-like feature.
  - In some cases you can add behaviour by extending the base language.

  1. ARM Templates
     - Support only azure
  
  2. Azure Blueprints
     - Support only azure 
     - Manages relationship between services

  3. CloudFormation
     - Only for AWS

  4. Cloud Deployment Manager
     - Supports on Google Cloud 

• Imperative
  - You say what you want, and the rest is filled in (implict).
  - Less verbose, you could end up with missconfiguration.
  - Does more than declarative.
  - Uses programming languages eg. Python, Ruby and javascript.
  - Imperative features is the utility of the entire feature set of the progamming language.

  1. AWS Cloud Development Kit (CDK)
     - Supports only AWS.
     - Many built-in templates for opinionated best practices.

  2. Pulumi 
     - Supports AWS, Azure, GCP and K8.

• Declarative-Imperative
  1. Terraform
     - Terraform is declarative but the terraform language features imperative-like finctionally.
     - Supports many cloud service providers (CSPs) and cloud services.
     - HCL-ish (Terraform Language):
       - Supports loops (for each).
       - Supports dynamic blocks.
       - Supports local.
     - Complex data structure (maps, collections).